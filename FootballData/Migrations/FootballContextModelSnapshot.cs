// <auto-generated />
using System;
using FootballData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FootballData.Migrations
{
    [DbContext(typeof(FootballContext))]
    partial class FootballContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FootballData.Models.BranchHours", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchID");

                    b.Property<int>("CloseTime");

                    b.Property<int>("DayOfWeek");

                    b.Property<int>("OpenTime");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.ToTable("BranchHours");
                });

            modelBuilder.Entity("FootballData.Models.Checkout", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckedOut");

                    b.Property<DateTime>("Due");

                    b.Property<int>("StadiumAssetID");

                    b.Property<int?>("StadiumCardID");

                    b.HasKey("ID");

                    b.HasIndex("StadiumAssetID");

                    b.HasIndex("StadiumCardID");

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("FootballData.Models.CheckoutHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CheckedIn");

                    b.Property<DateTime>("CheckedOut");

                    b.Property<int>("StadiumAssetID");

                    b.Property<int>("StadiumCardID");

                    b.HasKey("ID");

                    b.HasIndex("StadiumAssetID");

                    b.HasIndex("StadiumCardID");

                    b.ToTable("CheckoutHistories");
                });

            modelBuilder.Entity("FootballData.Models.Hold", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("HoldPlaced");

                    b.Property<int?>("StadiumAssetID");

                    b.Property<int?>("StadiumCardID");

                    b.HasKey("ID");

                    b.HasIndex("StadiumAssetID");

                    b.HasIndex("StadiumCardID");

                    b.ToTable("Holds");
                });

            modelBuilder.Entity("FootballData.Models.StadiumAsset", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImageURL");

                    b.Property<int?>("LocationID");

                    b.Property<int>("NumberOfCopies");

                    b.Property<int>("StatusID");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("StatusID");

                    b.ToTable("StadiumAssets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StadiumAsset");
                });

            modelBuilder.Entity("FootballData.Models.StadiumBranch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ImageURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("OpenDate");

                    b.Property<string>("Telephone")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("StadiumBranches");
                });

            modelBuilder.Entity("FootballData.Models.StadiumCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("Fees");

                    b.HasKey("ID");

                    b.ToTable("StadiumCards");
                });

            modelBuilder.Entity("FootballData.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("FootballData.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addresss");

                    b.Property<DateTime>("DOB");

                    b.Property<string>("FirstName");

                    b.Property<int?>("StadiumBranchID");

                    b.Property<int?>("StadiumCardID");

                    b.Property<string>("Surname");

                    b.Property<string>("TelephoneNumber");

                    b.HasKey("ID");

                    b.HasIndex("StadiumBranchID");

                    b.HasIndex("StadiumCardID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FootballData.Models.Book", b =>
                {
                    b.HasBaseType("FootballData.Models.StadiumAsset");

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("DeweyIndex")
                        .IsRequired();

                    b.Property<string>("ISBN")
                        .IsRequired();

                    b.ToTable("Book");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("FootballData.Models.Game", b =>
                {
                    b.HasBaseType("FootballData.Models.StadiumAsset");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<string>("Publisher")
                        .IsRequired();

                    b.ToTable("Game");

                    b.HasDiscriminator().HasValue("Game");
                });

            modelBuilder.Entity("FootballData.Models.Video", b =>
                {
                    b.HasBaseType("FootballData.Models.StadiumAsset");

                    b.Property<string>("Director")
                        .IsRequired();

                    b.ToTable("Video");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("FootballData.Models.BranchHours", b =>
                {
                    b.HasOne("FootballData.Models.StadiumBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID");
                });

            modelBuilder.Entity("FootballData.Models.Checkout", b =>
                {
                    b.HasOne("FootballData.Models.StadiumAsset", "StadiumAsset")
                        .WithMany()
                        .HasForeignKey("StadiumAssetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballData.Models.StadiumCard", "StadiumCard")
                        .WithMany("Checkouts")
                        .HasForeignKey("StadiumCardID");
                });

            modelBuilder.Entity("FootballData.Models.CheckoutHistory", b =>
                {
                    b.HasOne("FootballData.Models.StadiumAsset", "StadiumAsset")
                        .WithMany()
                        .HasForeignKey("StadiumAssetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballData.Models.StadiumCard", "StadiumCard")
                        .WithMany()
                        .HasForeignKey("StadiumCardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballData.Models.Hold", b =>
                {
                    b.HasOne("FootballData.Models.StadiumAsset", "StadiumAsset")
                        .WithMany()
                        .HasForeignKey("StadiumAssetID");

                    b.HasOne("FootballData.Models.StadiumCard", "StadiumCard")
                        .WithMany()
                        .HasForeignKey("StadiumCardID");
                });

            modelBuilder.Entity("FootballData.Models.StadiumAsset", b =>
                {
                    b.HasOne("FootballData.Models.StadiumBranch", "Location")
                        .WithMany("StadiumAssets")
                        .HasForeignKey("LocationID");

                    b.HasOne("FootballData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballData.Models.User", b =>
                {
                    b.HasOne("FootballData.Models.StadiumBranch", "StadiumBranch")
                        .WithMany("Users")
                        .HasForeignKey("StadiumBranchID");

                    b.HasOne("FootballData.Models.StadiumCard", "StadiumCard")
                        .WithMany()
                        .HasForeignKey("StadiumCardID");
                });
#pragma warning restore 612, 618
        }
    }
}
